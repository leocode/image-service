// run the server first

### IMAGE ###
POST http://localhost:3000/image/metadata
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-image.jpg"
Content-Type: image/jpg

< ./test/resources/test-image.jpg
--WebAppBoundary--

> {%
client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function() {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test("Response body is an object with properties", function() {
        var body = response.body;

        print(JSON.stringify(body, undefined, 2));

        client.assert(body.width, "Expected 'width' in response body");
        client.assert(body.height, "Expected 'height' in response body");
        client.assert(body.mimeType, "Expected 'mimeType' in response body");
        client.assert(body.orientation, "Expected 'orientation' in response body");
    });
%}

###
POST http://localhost:3000/image/request-reply/resize?height=300&width=300
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-image.jpg"
Content-Type: image/jpg

< ./test/resources/test-image.jpg
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is image/jpg", function() {
        var type = response.contentType.mimeType;
        client.assert(type === "image/jpg", "Expected 'image/jpg' but received '" + type + "'");
    });
%}

###
POST http://localhost:3000/image/request-reply/crop?top=10&left=10&height=30&width=30
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-image.jpg"
Content-Type: image/jpg

< ./test/resources/test-image.jpg
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is image/jpg", function() {
        var type = response.contentType.mimeType;
        client.assert(type === "image/jpg", "Expected 'image/jpg' but received '" + type + "'");
    });
%}

### VIDEO ###
POST http://localhost:3000/video/metadata
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-video.mp4"
Content-Type: video/mp4

< ./test/resources/test-video.mp4
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function() {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test("Response body is an object with properties", function() {
        var body = response.body;

        print(JSON.stringify(body, undefined, 2));

        client.assert(body.width, "Expected 'width' in response body");
        client.assert(body.height, "Expected 'height' in response body");
        client.assert(body.duration, "Expected 'duration' in response body");
        client.assert(body.mimeType, "Expected 'mimeType' in response body");
        client.assert(body.orientation, "Expected 'orientation' in response body");
    });
%}

###
POST http://localhost:3000/video/request-reply/thumbnail?second=3
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-video.mp4"
Content-Type: video/mp4

< ./test/resources/test-video.mp4
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is image/png", function() {
        var type = response.contentType.mimeType;
        client.assert(type === "image/png", "Expected 'image/png' but received '" + type + "'");
    });
%}

###
POST http://localhost:3000/video/request-reply/resize?height=300&width=300&codecName=h264
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-video.mp4"
Content-Type: video/mp4

< ./test/resources/test-video.mp4
--WebAppBoundary--

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is video/mp4", function() {
        var type = response.contentType.mimeType;
        client.assert(type === "video/mp4", "Expected 'video/mp4' but received '" + type + "'");
    });
%}
